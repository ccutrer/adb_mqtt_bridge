#!/usr/bin/env ruby

require 'adb'
require 'homie-mqtt'
require 'set'
require 'shellwords'
require 'slop'

class MQTTBridge
  def initialize(mqtt_uri, devices: [], id: "adb")
    @mqtt = MQTT::Client.new(mqtt_uri)

    @discovery = 300

    @homie = MQTT::Homie::Device.new(id, "ADB", mqtt: @mqtt, clear_topics: false)

    discovery_topic = "#{@homie.topic}/bridge/discover"
    @mqtt.subscribe(discovery_topic)
    @mqtt.unsubscribe(discovery_topic, wait_for_ack: true)
    while !@mqtt.queue_empty?
      packet = @mqtt.get
      next unless packet.topic == discovery_topic
      next unless packet.payload =~ /^\d+$/

      discover = packet.payload.to_i
      next if discovery > 86400
      @discovery = discovery
    end

    @homie.clear_topics

    @discovery_mutex = Mutex.new
    @explicit_devices = devices

    @ignored_adbs = Set.new
    @adbs = {}

    start_discovery_thread
    start_reconnect_thread

    @homie.node("bridge", "Bridge", "Bridge") do |bridge|
      discovery_property = bridge.property("discovery", "Auto-Discovery Interval", :integer, @discovery, format: 0..86400, unit: 's') do |discovery|
        next if discovery > 86_400

        old_discovery = @discovery
        @discovery = discovery

        discovery_property.value = discovery

        if @discovery < old_discovery || old_discovery == 0
          @discovery_thread.kill
          start_discovery_thread
        end
      end
    end

    @homie.publish

    Signal.trap("INT") do
      exit! 1
    end
    Signal.trap("TERM") do
      exit! 1
    end

    @homie.join
  end

  def start_discovery_thread
    @discovery_thread = Thread.new do
      connect_explicit_devices unless @explicit_devices.empty?
      discover
      loop do
        break if @discovery == 0
        sleep(@discovery)
        connect_explicit_devices unless @explicit_devices.empty?
        discover
      end
    end
  end

  def start_reconnect_thread
    @reconnect_thread = Thread.new do
      ADB::Discovery.discover do |serial, addr|
        unless @adbs.key?(serial)
          system("adb connect #{Shellwords.escape(addr)}")
          discover
        end
      end
    end
  end

  def connect_explicit_devices
    known_devices = ADB::Device.devices.map do |device_attrs|
      device_attrs[:adb_serial]
    end
    @explicit_devices.each do |addr|
      next if known_devices.any? do |adb_serial|
        addr == adb_serial || (!addr.include?(':') && "#{addr}:5555" == adb_serial)
      end
      system("adb connect #{Shellwords.escape(addr)}")
    end
  end

  def discover
    @discovery_mutex.synchronize do
      ADB::Device.devices.each do |device_attrs|
        # remove ADBs that are gone
        known_adb = @adbs.find { |(_, adb)| adb.device_attrs[:transport_id] == device_attrs[:transport_id] }
        next if known_adb
        next if @ignored_adbs.include?(device_attrs[:transport_id])

        adb = nil
        begin
          adb = ADB::Device.create(device_attrs, method(:update_attribute))
        rescue ADB::Device::DeviceNotFound
          # it's probably not ready yet
          next
        end

        if @adbs.key?(adb.serialno)
          puts "discarding device #{adb.serialno} at #{device_attrs[:adb_serial]} because we already have it at #{@adbs[adb.serialno].device_attrs[:adb_serial]}"
          adb.close
          @ignored_adbs << device_attrs[:transport_id]
          next
        end

        @adbs[adb.serialno] = adb

        node = publish_adb(adb)

        Thread.new do
          begin
            loop do
              adb.update
              sleep 1
            end
          ensure
            adb.close
            @discovery_mutex.synchronize do
              @adbs.delete(adb.serialno)
              @ignored_adbs = Set.new
              @homie.remove_node(adb.serialno)
            end
          end
        end

        Thread.new do
          adb.getevents do |key, action|
            node['event'].value = "#{key} #{action}"
          end
        end

        true
      end
    end
  end

  def update_attribute(adb, attr, value)
    value = value.join(",") if value.is_a?(Array)
    prop = @homie[adb.serialno][attr.to_s.gsub('_', '-')].value = value.to_s
    if attr == :wakefulness
      @homie[adb.serialno]["awake"].value = (value != :asleep).to_s
    end
  end

  def publish_adb(adb)
    @homie.node(adb.serialno, adb.device_name, adb.class.name.split('::').last) do |node|
      node.property("event", "Incoming stream of key events", :string, retained: false)
      node.property("keyevent", "Send a key event", :string, retained: false) do |value|
        adb.keyevent(value)
      end
      node.property("foreground-app-package", "Foreground App Package", :string)
      node.property("foreground-app", "Foreground App Display Name", :string)
      node.property("current-window", "Current window of the foreground app", :string)
      node.property("playback-state", "Current playback state", :enum, format: ADB::Device::PLAYBACK_STATES.values)
      node.property("playback-position", "Current playback position", :float, unit: 's')
      node.property('playback-duration', 'Total duration of current track', :float, unit: 's')
      node.property("playback-speed", "Current playback speed", :float, unit: "%")
      node.property("playback-actions", "Valid actions for current media session", :string)
      node.property('playback-title', 'Current media item title', :string)
      node.property('playback-album', 'Current song album', :string)
      node.property('playback-artist', 'Current media item artist', :string)
      node.property('playback-track', 'Current song track', :integer)
      node.property('playback-track-count', "Current album's track count", :integer)

      if adb.respond_to?(:wakefulness)
        node.property("wakefulness", "Wakefulness", :enum, format: %w[awake asleep dreaming]) do |value|
          adb.wake_up if value == 'awake'
          adb.sleep if value == 'sleep'
        end
        node.property("awake", "Awake", :boolean) do |value|
          value ? adb.wake_up : adb.sleep
        end
      end
    end
  end
end


opts = Slop.parse do |o|
  o.array '-d', '--device', 'explicitly connect to device'
end

MQTTBridge.new(opts.arguments.first, devices: opts[:device])
